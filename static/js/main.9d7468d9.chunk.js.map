{"version":3,"sources":["Stocks/Stocks.js","Modal/Modal.js","Portfolio/Portfolio.js","App.js","serviceWorker.js","index.js"],"names":["Stock","this","PRICE","Math","random","toFixed","props","react_default","a","createElement","className","stock","symbol","quantity","type","value","onClick","select","React","Component","Modal","state","_this2","style","display","tabIndex","role","placeholder","onChange","e","setState","target","parseInt","newRow","id","data-dismiss","abort","Portfolio","openModal","selectedStocks","_this$props","onRemove","stocks","map","i","Stocks_Stock","key","Object","toConsumableArray","concat","Modal_Modal_Modal","deleteRow","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","maxId","maxStockId","elements","name","updateTitle","bind","assertThisInitialized","newPortfolio","deletePortfolio","index","findIndex","el","length","newElements","filter","element","push","alert","deleteRows","newRows","row","some","row2","_this3","Portfolio_Portfolio_Portfolio","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9d7468d9.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Stocks.css';\r\n\r\n// Creates random value to imitate value from missing API\r\nconst getPrice = () => (Math.random() * 50).toFixed(2);\r\n\r\n\r\nexport default class Stock extends React.Component {\r\n    // fires price function one time when component is rendered\r\n    componentWillMount() {\r\n        this.PRICE = getPrice();\r\n    }\r\n\r\n    render() {\r\n        const { props } = this;\r\n        return <div className=\"row\">\r\n            <div className=\"col\">\r\n                {/* Symbol */}\r\n                <span> {props.stock.symbol} </span>\r\n            </div>\r\n            <div className=\"col\">\r\n                {/* Unit Value with random value generated */}\r\n                <span> {this.PRICE} €</span>\r\n            </div>\r\n\r\n            <div className=\"col\">\r\n                {/* Amount of stocks */}\r\n                <span> {props.stock.quantity} </span>\r\n            </div>\r\n\r\n            <div className=\"col\">\r\n                {/* Amount of stocks multiplied with Unit Value (price) */}\r\n                <span> {(this.PRICE * props.stock.quantity).toFixed(2)} €</span>\r\n            </div>\r\n\r\n            <div className=\"check col\">\r\n                {/* Checkbox for remove (or graph output) */}\r\n                <label><input type=\"checkbox\" value=\"\" onClick={() => props.select(props.stock)}>\r\n                </input></label>\r\n            </div>\r\n        </div>;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './Modal.css';\r\n\r\n// this modal lets you add new row\r\nexport default class Modal extends React.Component {\r\n    state = {\r\n        symbol: '',\r\n        quantity: 0\r\n    };\r\n\r\n    render() {\r\n        // bootstrap modal\r\n        return <div className=\"modal\" style={{display: 'block'}} tabIndex=\"-1\" role=\"dialog\">\r\n            <div className=\"modal-dialog\" role=\"document\">\r\n                <div className=\"modal-content\">\r\n                    <div className=\"modal-header\">\r\n                        {/* Title */}\r\n                        <h5 className=\"modal-title\">Add new stock</h5>\r\n                    </div>\r\n\r\n                    <div className=\"modal-body\">\r\n                        {/* Symbol input */}\r\n                        <div className=\"form-group\">\r\n                            <label> Symbol </label>\r\n                            <input placeholder=\"Insert Symbol here, i.e. NOK\" className='form-control' onChange={\r\n                                (e) => this.setState({symbol: e.target.value})\r\n                            }>\r\n                            </input>\r\n\r\n                        </div>\r\n                        {/* Quantity input */}\r\n                        <div className=\"form-group\">\r\n                            <label> Quantity </label>\r\n                            <input placeholder=\"Insert amount\" type='number' className='form-control' onChange={\r\n                                (e) => this.setState({quantity: parseInt(e.target.value, 10)})\r\n                            }>\r\n                            </input>\r\n                        </div>\r\n                    </div>\r\n                    {/* Buttons */}\r\n                    <div className=\"modal-footer\">\r\n                        <button type=\"button\" className=\"save btn-sm btn-primary\"\r\n                                onClick={() => this.props.newRow(this.props.id, this.state)}>\r\n                            Save changes\r\n                        </button>\r\n                        <button type=\"button\" className=\"cancel btn-sm btn-secondary\" data-dismiss=\"modal\" onClick={this.props.abort}>Cancel</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './Portfolio.css';\r\nimport Stocks from '../Stocks/Stocks'\r\nimport Modal from '../Modal/Modal'\r\n\r\nexport default class Portfolio extends React.Component {\r\n    // Prevent modal opened automatically\r\n    state = {\r\n        openModal: false,\r\n        selectedStocks: []\r\n    };\r\n\r\n    render() {\r\n        const {id, value, onChange, onRemove, stocks } = this.props;\r\n        return <div className=\"container col-lg-6\">\r\n            <button className=\"delete\" onClick={() => onRemove(id)}>X</button>\r\n            <input className=\"title\" type=\"text\" value={value} onChange={e => onChange(id, e)}/>\r\n            <div className=\"stockCont\">\r\n                {/* Table header */}\r\n                <div className=\"header row\">\r\n                    <div className=\"col\">\r\n                        <span> Name </span>\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <span> Unit value </span>\r\n                    </div>\r\n\r\n                    <div className=\"col\">\r\n                        <span> Quantity </span>\r\n                    </div>\r\n\r\n                    <div className=\"col\">\r\n                        <span> Total </span>\r\n                    </div>\r\n\r\n                    <div className=\"col\">\r\n                    </div>\r\n                </div>\r\n                {/* Render stocks and keep track of selected stocks */}\r\n                {stocks.map((stock, i) => <Stocks key={i} stock={stock}\r\n                                                  select={(stock) => this.setState({selectedStocks: [...this.state.selectedStocks, stock]})}>\r\n                </Stocks>)}\r\n            </div>\r\n            {/* when row is added modal is closed */}\r\n            {this.state.openModal ? <Modal id={id} abort={ () => this.setState ({openModal: false}) } newRow={(id, stock) => {\r\n                this.props.newRow(id, stock);\r\n                this.setState({openModal: false});\r\n            }} /> : null}\r\n\r\n            {/* Quantity input */}\r\n            <div className=\"buttonRow\">\r\n                <button onClick={() => this.setState({openModal: true})} className=\"addStock\">Add stock +</button>\r\n                <button className=\"graph\"> Graph</button>\r\n                <button className=\"remove\" onClick={() => this.props.deleteRow(id, this.state.selectedStocks)}>Remove selected</button>\r\n            </div>\r\n        </div>;\r\n    }\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Portfolio from './Portfolio/Portfolio';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        // Elements array for portfolio component\n        this.state = {\n            elements: [{\n                id: 0,\n                name: 'Title 0',\n                // empty array for stocks when they are later added\n                stocks: []\n            }],\n        };\n        // Binds for update title, create new portfolio and delete portfolio\n        this.updateTitle = this.updateTitle.bind(this);\n        this.newPortfolio = this.newPortfolio.bind(this);\n        this.deletePortfolio = this.deletePortfolio.bind(this);\n    }\n    // Rename title field\n    updateTitle(id, e) {\n        const { value } = e.target;\n        const elements = this.state.elements;\n\n        // Check correct portfolio ID\n        const index = elements.findIndex(el => el.id === id);\n        elements[index].name = value;\n        this.setState({ elements });\n    }\n\n    // give basic starting values for stock and new portfolio\n    // This helps to prevent same duplicate id problem when id is deleted and added again\n    maxId = 0;\n    maxStockId = 0;\n\n    // Create new portfolio\n    newPortfolio() {\n        const { elements } = this.state;\n\n        // Creates new array for portfolio\n        elements[elements.length] = {\n            id: this.maxId + 1,\n            name: 'Title ' + elements.length,\n            stocks: []\n        };\n        this.maxId += 1;\n\n        this.setState({\n            elements\n        })\n    }\n\n    // Deletes existing portfolio\n    deletePortfolio(id) {\n\n        // check ID and push everything else in the array except curren ID aka. removes it from the array.\n        const newElements = this.state.elements.filter(element => {\n            return element.id !== id;\n        });\n\n        this.setState({\n            elements: [...newElements]\n        })\n    }\n\n    // Create new row\n    newRow(id, newRow) {\n        const { elements } = this.state;\n\n        // map checks all items in array and returns edited array if you edit.\n        const newElements = elements.map( element => {\n            if (element.id === id){\n                newRow.id = this.maxStockId + 1;\n                this.maxStockId += 1;\n\n                // Prevents user to add more than 50 same symbol items in one porfolio\n                if (element.stocks.filter((stock) => stock.symbol === newRow.symbol).length < 50 )\n                    element.stocks.push(newRow);\n                else alert ('Maximum number of same type of symbols exceeded (50)')\n            }\n            return element;\n        });\n        this.setState({\n            elements: newElements\n        })\n    }\n\n    // Delete row\n    deleteRow(id, deleteRows) {\n        const newRows = this.state.elements.filter(element => {\n            if (element.id === id)  {\n\n                // lets you delete more than one rows at the same time\n                element.stocks = element.stocks.filter(row => !deleteRows.some(row2 => row2.id === row.id));\n            }\n            return element;\n        });\n        this.setState({elements: newRows});\n    }\n\n\n    render() {\n        const { elements } = this.state;\n        return (\n            <div className=\"wrapper col-lg-12\">\n                {/* Let's user add up to 10 portfolios */}\n                { ( elements.length < 10 &&\n                <button\n                    onClick={this.newPortfolio}\n                    className=\"portbtn col-lg-12\">Add new portfolio +\n                </button> )\n                // fires this instead of a new portfolio button if there are 10 portfolios created\n                ||\n                <div className=\"infoBox\">  Maximum amount (10) of portfolios exceeded </div> }\n\n\n                <div>\n                    {/* All variables for the Porfolios that are rendered */}\n                    {elements.map(element =>\n                        <Portfolio\n                            key={element.id}\n                            value={element.name}\n                            id={element.id}\n                            onChange={this.updateTitle}\n                            onRemove={this.deletePortfolio}\n                            newRow={this.newRow.bind(this)}\n                            deleteRow={this.deleteRow.bind(this)}\n                            stocks={element.stocks}\n                        />\n                    )}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}